BEST RESULTS:
Gold standard: 3813 lines
               3813 unique
Breakdown by class:
positive 	1572
neutral 	1640
negative 	601


Confusion table:
gs \ pred| positive| negative|  neutral
---------------------------------------
 positive|     1009|       82|      481
 negative|       79|      295|      227
  neutral|      204|       65|     1371


Scores:
class	                       prec	              recall     fscore
positive 	 (1009/1292) 0.7810	  (1009/1572) 0.6419	 0.7046	
negative 	   (295/442) 0.6674	    (295/601) 0.4908	 0.5657	
neutral 	 (1371/2079) 0.6595	  (1371/1640) 0.8360	 0.7373	
-----------------------------------------------------------------------
average(pos and neg)                                             0.6351	


CONFIGURATION:
finalTest(clfpipeline,ysKeyName = 'sentiment_num',userNorm = None,urlNorm = None,hashNormalise=False,digitNormalise=True)

CLASSIFIER:
clfpipeline = Pipeline([\
            ('features',features),
            ('clf',LogisticRegression(penalty = 'l2',C = .4))])
            
#GM-MLT features
features = FeatureUnion([
            ('word-gram-count',GUMLTwordGrams),
            ('stem-gram-count',GUMLTstems ),
            ('negate-feats',negateCounts),
            ('cmu-cluster',GUMLTClusterFeatures),
            ('gmmlt-polarity', GUMLTpolarity),
            ])


#GU-MLT
GUMLTwordGrams = Pipeline([\
            ('docs',tran.DocsExtractor(transformedTweetKeyName = 'normalised_string')),\
            ('count',tran.CountVectorizer(tokenizer=string.split,ngram_range=(1, 1) ,binary=True))])
GUMLTstems = Pipeline([\
            ('docs',tran.DocsExtractor('stem_string')),\
            ('count',tran.CountVectorizer(tokenizer=string.split,ngram_range=(1, 1) ,binary=True))])
negateCounts = Pipeline([\
            ('negate-counts-dict',tran.NegationCountExtractor()),\
            ('negate-vec',tran.DictVectorizer())])
GUMLTClusterFeatures = Pipeline([\
            ('clusters',tran.ClusterExtractor(['collapsed_token_list','raw_token_list','normalised_token_list'])),\
            ('count',tran.CountVectorizer(tokenizer=string.split,ngram_range=(1, 1) ,binary=False,\
                     vocabulary = helper.loadJSONfromFile(helper.getProjectPath() + '/wxtalk/resources/lexicons/CMU/CMU-cluster-vocab.json')))])   
GUMLTpolarity = Pipeline([\
            ('polarity-dict',tran.GUMLTsentiWordNetExtractor(tokenListKeyName= 'collapsed_token_list')),\
            ('polarity-vec',tran.DictVectorizer())])
